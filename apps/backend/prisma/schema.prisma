// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  GUEST
  ADMIN
  HOTELADMIN
  HOTELRECEPTIONIST
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)

  role Role @default(GUEST)

  userName     String? @unique
  email        String  @unique
  passwordHash String?

  firstName String?
  lastName  String?
  avatar    String?

  hotelsAsAdmin        Hotel[] @relation(name: "Admins")
  hotelsAsReceptionist Hotel[] @relation(name: "Receptionists")

  Booking Booking[]
  reviews Review[]

  @@map("users")
}

model Hotel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String  @unique
  email       String  @unique
  website     String?
  phoneNumber String
  address     String
  description String?
  hotelProperties HotelProperty[] @relation(name: "HotelProperties")

  categories Category[]
  reviews    Review[]
  rewards Reward[]

  admins        User[] @relation(name: "Admins")
  receptionists User[] @relation(name: "Receptionists")

  Booking Booking[]
  
  @@map("hotels")
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hotel Hotel[]
}

model Review {
  id        Int      @id @default(autoincrement())
  text      String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hotelId Int
  hotel   Hotel @relation(fields: [hotelId], references: [id])
  userId  Int
  user    User  @relation(fields: [userId], references: [id])
}

model Booking {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  description String?
  price       Float?
  startDate    DateTime?
  endDate     DateTime?
  status      String
  type        String

  hotel   Hotel @relation(fields: [hotelId], references: [id])
  hotelId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@map("bookings")
}

model Reward {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?
  price       Float?
  image       String?

  active Boolean @default(true)
  validFrom DateTime
  validUntil DateTime

  hotel   Hotel @relation(fields: [hotelId], references: [id])
  hotelId Int

  @@map("reward")
  }

  model HotelProperty {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String @unique
  description String?

  hotel   Hotel[] @relation(name: "HotelProperties")

  subCategory HotelPropertySubCategory @relation(fields: [subCategoryId], references: [id])
  subCategoryId Int
  }

  model HotelPropertyCategory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  url         String @unique
  description String?

  subCategories HotelPropertySubCategory[]
  }

  model HotelPropertySubCategory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?

  category HotelPropertyCategory @relation(fields: [categoryId], references: [id])
  categoryId Int

  properties HotelProperty[]
  }



